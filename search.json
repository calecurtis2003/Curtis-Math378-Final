[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n## Model.qmd\n# Chapter 1\n## Get Data\n\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n## Define Model and Fit\n\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n\n## Get some information\n\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n# Chapter 2\nimport pins\n \nfrom vetiver import VetiverModel\nfrom vetiver import vetiver_pin_write \nfrom vetiver import VetiverAPI\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\nb = pins.board_folder('data/model', allow_pickle_read=True)\n\nvetiver_pin_write(b, v, 'penguin_model')\n\nv = VetiverModel.from_pin(b, 'penguin_model')\n\napp = VetiverAPI(v, check_prototype=True)\n#idk what to do with this code\n#app.run(port = 8080)\n\n\n# Chapter 6\n#from vetiver import prepare_docker\n#prepare_docker(board = b,pin_name = 'penguin_model')\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240424T030334Z-565d5"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n# Cale Curtis's Final Project for Math 378 (Hell Stats). \n\n# Documentation: None of this would have been possible without EI from Dr. Hauschild. Also, myself and Ethan Stroup worked hand in hand on this project including the tree classification models and uploading images to get that A."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\n## Eda.qmd\n## Penguin Size and Mass by Sex and Species\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(dbplyr)\n\n\n\nAttaching package: 'dbplyr'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    ident, sql\n\n\nCode\n# Chapter 1\ndf &lt;- palmerpenguins::penguins\n\n\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      ), .groups = \"drop\"\n    ) %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400\n\n\n\n\n\nCode\n## Penguin Size vs Mass by Species\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode\n# Chapter 3\ncon &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\n\ndf &lt;- dplyr::tbl(con, \"penguins\")\nDBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins, append = TRUE)\n\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      ),.groups = \"drop\"\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n\n\n\n\n\nCode\n#req &lt;- httr2::request(\"http://127.0.0.1:8080/predict\") |&gt;\n#  httr2::req_body_json(\n#   list(\n#     list(\n#        \"bill_length_mm\" = 0,\n#        \"species_Chinstrap\" = FALSE,\n#        \"sex_male\" = FALSE\n#      )\n#    )\n#  ) |&gt;\n#  httr2::req_perform()\n#res &lt;- httr2::resp_body_json(req)$predict[[1]]\n\nDBI::dbDisconnect(con, shutdown=TRUE)\n# this command goes in the consol once everything is installed: renv::snapshot()"
  },
  {
    "objectID": "classification.html",
    "href": "classification.html",
    "title": "Penguins Tree Models",
    "section": "",
    "text": "## Initialize Penguin Data\n### Load Necessary Packages\n\n\nCode\nlibrary(palmerpenguins)\n\nlibrary(dplyr)\n\nlibrary(ggplot2)\n\nlibrary(tidymodels)\n\nlibrary(randomForest)\n\nlibrary(rpart.plot)\n\ntidymodels_prefer()\n\npenguin_data &lt;- palmerpenguins::penguins\n\ndf &lt;- na.omit(penguin_data)\n\n\n### Split Data\n\n\nCode\nset.seed(2025)\n\npenguins_split &lt;- initial_split(df,prop = 0.8, strata = species)\n\npenguins_train &lt;- training(penguins_split)\n\npenguins_test &lt;- testing(penguins_split)\n\n\n## Simple Classification Tree\n### Create Simple Tree and Fit\n\n\nCode\nclass_tree_spec &lt;- decision_tree() %&gt;%      \n\n  set_engine(\"rpart\") %&gt;%      \n\n  set_mode(\"classification\")\n\nclass_tree_fit &lt;- class_tree_spec %&gt;% \n\n  fit(species~., data = penguins_train)\n\n\n### Plot Fitted Tree\n\n\nCode\nclass_tree_fit %&gt;%\n\n  extract_fit_engine() %&gt;%\n\n  rpart.plot()\n\n\n\n\n\n\n\n\n\n### Get Accuracy of Tree\n\n\nCode\naugment(class_tree_fit, new_data = penguins_test) %&gt;%      \n\n  accuracy(truth = species, estimate = .pred_class)\n\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.941\n\n\n## Bagging Approach\n### Create Bagging Model and Fit\n\n\nCode\nbagging_spec &lt;- rand_forest(mtry = .cols()) %&gt;%      \n\n  set_engine(\"randomForest\", importance = TRUE) %&gt;%      \n\n  set_mode(\"classification\")\n\nbagging_fit &lt;- bagging_spec %&gt;%    \n\n  fit(species ~ ., data = penguins_train)\n\n\nNote the default number of trees is 500\n### Show Important Predictors\nSince Bagging uses an ensemble of trees (in this case 500), we are unable to plot them\n\n\nCode\nlibrary(vip)\n\nbagging_fit %&gt;%       \n\n  extract_fit_engine() %&gt;%       \n\n  vip()\n\n\n\n\n\n\n\n\n\n### Get Accuracy of Tree\n\n\nCode\naugment(bagging_fit, new_data = penguins_test) %&gt;%      \n\n  accuracy(truth = species, estimate = .pred_class)\n\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass         1\n\n\nSeems as if the species in penguin data is easy to predict"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math 378 Final",
    "section": "",
    "text": "# My greatest accomplishment yet. \n\nknitr::include_graphics(\"./Chinstrap.jpg\")"
  }
]