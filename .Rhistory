from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = v,pin_name = 'penguin_model')
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
api = vetiver_api.app
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
#api = vetiver_api.app
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = [vals()])
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
# Chapter 3
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
quit
reticulate::source_python('~/Math 378 Final/app.py')
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
# Chapter 3
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
# Chapter 3
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
source .venv \Scripts\activate
shiny::runApp('Penguin_Mass_Predictor')
quit
.venv\Scripts\activate
shiny::runApp('Penguin_Mass_Predictor')
reticulate::repl_python()
output$vals <- renderPrint(vals())
server <- function(input, output) {
log <- log4r::logger()
log4r::info(log, "App Started")
# Input params
vals <- reactive(
list(
bill_length_mm = input$bill_length,
species_Chinstrap = input$species == "Chinstrap",
species_Gentoo = input$species == "Gentoo",
sex_male = input$sex == "Male"
)
)
# Fetch prediction from API
pred <- eventReactive(
input$predict,
{
log4r::info(log, "Prediction Requested")
r <- httr2::request(api_url) |>
httr2::req_body_json(list(vals())) |>
httr2::req_perform()
log4r::info(log, "Prediction Returned")
if (httr2::resp_is_error(r)) {
log4r::error(log, paste("HTTP Error"))
}
httr2::resp_body_json(r)
},
ignoreInit = TRUE
)
# Render to UI
output$pred <- renderText(pred()$predict[[1]])
output$vals <- renderPrint(vals())
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Fetch prediction from API
pred <- eventReactive(
input$predict,
httr2::request(api_url) |>
httr2::req_body_json(list(vals())) |>
httr2::req_perform() |>z
httr2::resp_body_json(),
runApp('Penguin_Mass_Predictor')
runApp('Penguin_Mass_Predictor')
reticulate::repl_python()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
# Chapter 3
import duckdb
from palmerpenguins import penguins
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
quit
install.packages("log4r")
runApp('Penguin_Mass_Predictor')
## Penguin Size and Mass by Sex and Species
library(DBI)
library(duckdb)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
# Chapter 1
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
), .groups = "drop"
) %>%
knitr::kable()
## Penguin Size vs Mass by Species
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Chapter 3
# It says duckdb() is being used by something else, but what the fuck does that mean and how do i fix it?????????????????????????????????????
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins, append = TRUE)
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
),.groups = "drop"
) %>%
dplyr::collect() %>%
knitr::kable()
#this code chunk is causing an error and idk why. It should be sending some prediction stuff to my app, but it won't.
req <- httr2::request("http://127.0.0.1:8080/predict") |>
httr2::req_body_json(
list(
list(
"bill_length_mm" = 0,
"species_Chinstrap" = FALSE,
"species_Gentoo" = FALSE,
"sex_male" = FALSE
)
)
) |>
httr2::req_perform()
res <- httr2::resp_body_json(req)$predict[[1]]
DBI::dbDisconnect(con)
# this command goes in the consol once everything is installed: renv::snapshot()
## Penguin Size and Mass by Sex and Species
library(DBI)
library(duckdb)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(dbplyr)
# Chapter 1
df <- palmerpenguins::penguins
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
), .groups = "drop"
) %>%
knitr::kable()
## Penguin Size vs Mass by Species
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
# Chapter 3
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
reticulate::repl_python()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
# Chapter 1
## Get Data
df = penguins.load_penguins().dropna()
df.head(3)
## Define Model and Fit
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
## Get some information
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
# Chapter 2
import pins
from vetiver import VetiverModel
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b, v, 'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#idk what to do with this code
#app.run(port = 8080)
# Chapter 6
from vetiver import prepare_docker
prepare_docker(board = b,pin_name = 'penguin_model')
# Chapter 3
# duckdb
#from palmerpenguins import penguins
#con = duckdb.connect('my-db.duckdb')
#df = penguins.load_penguins()
#con.execute('CREATE TABLE penguins AS SELECT * FROM df')
#con.close()
#import requests
#req_data = {
#  "bill_length_mm": 0,
#  "species_Gentoo": False,
#  "sex_male": False
#}
#req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
#res = req.json().get('predict')[0]
quit
runApp('Penguin_Mass_Predictor')
quit
renv::init()
